#+TITLE: Transpiling OpenModelica Models to JavaScript
#+AUTHOR: Keshav Krihsnamurti
#+DATE: [2017-06-15 THU]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org 

* The Goal
The goal of the project is understanding the process of conversion from
modelica to javascript
The Idea is to be able to build a framework to seamlessly transpile c to client
friendly javascript.

* Phase 0 - Understanding the pipeline
#+CAPTION: The intended Flow
#+NAME:   fig:1
[[./Flow.png]]
* Phase 1 - Converting C to JavaScript
C ( or rather =clang= generated llvm ) can be converted to javascript with the
help of emscripten
** Emscripten Description
Emscripten allows for virtually zero hassle-porting of c to javascript.
It has few limitations though
*** Emscripten Limitations
**** Code that is multi-threaded and uses shared state.
JavaScript is single threaded but it emulates multi threading  (webworkers),
but they cannot share state Å\ instead they pass messages.
**** Code that relies on x86 alignment behavior.
 x86 allows unaligned reads and writes (so for example you can read a 16-bit
value from a non-even address), but other architectures do not (ARM will raise
SIGILL).
For Emscripten-generated JavaScript the behavior is undefined. 
**** Code that uses low-level features of the native environment.
for example native stack manipulation in conjunction with setjmp/longjmp (it
supports proper setjmp/longjmp,i.e., jumping down the stack,
but not jumping up to an unwound stack, which is undefined behavior).
*** Code that compiles but might run slowly 
**** 64-bit int variables.
Mathematical operations (+, -, *, /) are slow because they are emulated
(bitwise operations are reasonably fast).
JavaScript does not have a native 64-bit int type so this is unavoidable.
**** C++ Exceptions.
In JavaScript such code generally makes the JavaScript engine turn off various
optimizations. For that reason exceptions are turned off by default in -O1 and
above.
To re-enable them, run =emcc -s DISABLE_EXCEPTION_CATCHING=0= (see
src/settings.js).
*** API Limitations
The browser environment and JavaScript are different from the native
environments that C and C++ typically run in.
These differences impose some limitations on how native APIs can be called and
used.
**** Networking.
Emscripten supports libc networking functions but you must limit yourself to
asynchronous (non-blocking) operations. This is required because the underlying
JavaScript networking functions are asynchronous.
**** File Systems.
Emscripten supports libc file system functions and C/C++ code can be written in the normal way.
Code run in a browser environment is sandboxed, and does not have direct access
to the local file system. Instead, Emscripten creates a virtual file system
that may be preloaded with data or linked to URLs for lazy loading. This
affects when synchronous file system functions can be called and how a project
is compiled. 
**** Application Main Loop.
The browser event model uses co-operative multitasking Å\ each event has a
ÅgturnÅh to run, and must then return control to the browser event loop so that
other events can be processed. A common cause of HTML pages hanging is
JavaScript that does not complete and return control to the browser.
** Emscripten Examples
Here are a few examples to demonstrate emscripten 
*** A simple hello world example
Hello World!    
#+NAME hello_world
#+BEGIN_SRC c

#include<stdio.h>
 
int main() {
printf("Hello People!\n");
return 0;
}

#+END_SRC

Corresponding compilation code 
=emcc hello_world.c -o hello_world.html=
*** A simple hello world with custom input 
A hello world program that asks you for your name

#+NAME hello_world_name
#+BEGIN_SRC c
#include<stdio.h>

int main() {

char name[20];
scanf("%s\n",name);
printf("hello %s\n",name);

return 0;
}

#+END_SRC

command to compile the source :
=emcc hello_world_name.c -o hello_world_test.html=
*** A simple graphics Demonstration
We'll draw a simple cube on the screen
#+NAME graphics
#+BEGIN_SRC c

#include <stdio.h>
#include <SDL/SDL.h>

#ifdef __EMSCRIPTEN__
#include <emscripten.h>
#endif

int main(int argc, char** argv) {
  printf("hello, world!\n");

  SDL_Init(SDL_INIT_VIDEO);
  SDL_Surface *screen = SDL_SetVideoMode(256, 256, 32, SDL_SWSURFACE);

#ifdef TEST_SDL_LOCK_OPTS
  EM_ASM("SDL.defaults.copyOnLock = false; SDL.defaults.discardOnLock = true; SDL.defaults.opaqueFrontBuffer = false;");
#endif

  if (SDL_MUSTLOCK(screen)) SDL_LockSurface(screen);
  for (int i = 0; i < 256; i++) {
    for (int j = 0; j < 256; j++) {
#ifdef TEST_SDL_LOCK_OPTS
      // Alpha behaves like in the browser, so write proper opaque pixels.
      int alpha = 255;
#else
      // To emulate native behavior with blitting to screen, alpha component is ignored. Test that it is so by outputting
      // data (and testing that it does get discarded)
      int alpha = (i+j) % 255;
#endif
      *((Uint32*)screen->pixels + i * 256 + j) = SDL_MapRGBA(screen->format, i, j, 255-i, alpha);
    }
  }
  if (SDL_MUSTLOCK(screen)) SDL_UnlockSurface(screen);
  SDL_Flip(screen);

  printf("you should see a smoothly-colored square - no sharp lines but the square borders!\n");
  printf("and here is some text that should be HTML-friendly: amp: |&| double-quote: |\"| quote: |'| less-than, greater-than, html-like tags: |<cheez></cheez>|\nanother line.\n");

  SDL_Quit();

  return 0;
}

#+END_SRC

code to compile it in c:
=gcc graphics.c -lSDL=

code to compile it in JavaScript:
=emcc graphics.c -o graphics.html=
*** A simple program to read from a file
** Tangling code
#+BEGIN_SRC c :eval no :noweb yes :tangle hello_world.c
<<hello_world>> 
#+END_SRC

#+BEGIN_SRC c :eval no :noweb yes :tangle hello_world_name.c
<<hello_world_name>> 
#+END_SRC

#+BEGIN_SRC c :eval no :noweb yes :tangle graphics.c
<<graphics>> 
#+END_SRC
* Progress so far
** Efforts made:
*** Sources found:
**** [[https://github.com/tshort/openmodelica-javascript][Modelica Javascript]]

This is a framework built by tom short to compile modelica to javascript the
work by xogeny involved his tom's work.

Example 1: [[http://tshort.github.io/mdpad/mdpad.html?Modelica.Electrical.Analog.Examples.ChuaCircuit.md][Chua Circuit]]

The model ,if implemented ,could be very useful.

Problems:

- The build is broken, and the lack of sufficient documentation makes the
  effort to repair it rather difficult.
- The build only works on openmodelica that is compiled from source. The
  compilation is proving next to impossible because of many conflicting
  dependencies which i am unable to resolve by myself. 
- Documentation on the work is sparse

**** [[http://book.xogeny.com/][Modelica By Example]]

The effort entailed understanding The models given as an example

Example 1: [[http://book.xogeny.com/behavior/equations/population/][Lotka Volterra Systems]]

Problems:

- The models are rendered offline and served . it makes it rather improbable to
  run the models offline only.
  Capturing the models doesn't help as the paths are hard coded.
- even if reverse engineered, the work in it's current form would involve a lot
  of manual optimization which possible couldn't be delegated down to an
  algorithm

*** Correspondences made

I emailed both Tom short and Xogeny.

#+BEGIN_QUOTE email-tom-sent
Dear Tom,
I am very interested in your work in compiling openmodelica to javascript.
I want to use it to convert my institute's entire virtual learning platform to
javascript.
But i am having issues in understanding your work.
For example,the packaged version of openmodelica doesn't come with a build
directory.
Also, in the packaged version,the core library files you replace are scattered throughout out the linux system.
can you please help me set up a working framework?
#+END_QUOTE

#+BEGIN_QUOTE email-tom-received
Hello Keshav. This is the perfect application for this approach. 
*Unfortunately, I have not kept up with changes in OpenModelica.*
*Further, I lost my build a while back after a crash*,
so I don't have a working system that can build this.
I don't have time to try to recreate it in the near term.
*Perhaps you could check with Michael Tiller of Xogeny.*
He used my effort as a starting point to run live examples in his book:

http://book.xogeny.com/

You could check to see if he has a working build.
#+END_QUOTE

#+BEGIN_QUOTE email.xogent-sent
Hello Michael!
I stumbled upon yours and tom short's work on converting modelica to javascript.
I'm really interested in converting the virtual learning platform of my institute to javascript.
I emailed tom regarding this but unfortunately tom did not have a viable build of work.
Could you provide me certain pointers to leverage toms work to amke it viable for my own project?
I'm having certain basic issues in getting it to work.
If you can spare some time,could you tell me the process by which you incorporated it in your own work in a little detail?
It will be immensely helpful.
#+END_QUOTE

#+BEGIN_QUOTE email.xogeny-received
Keshav,

  Your best bet is to talk with the OpenModelica group.  I'm just leveraging what they have done.  The last time I used OpenModelica, it was possible to build the compiler in such a way that it produced Javascript.  Hopefully it still has that ability.

  Good luck.

#+END_QUOTE 
*** Summary of problems
**** Trouble compiling openmodelica from source

Modelica has a list of dependencies that have conflicting demands in the core
library,specifically this error ( this is just the latest one)

#+BEGIN_QUOTE error-openmodelica-compile

The following packages have unmet dependencies:
 openmodelica : Depends: omc but it is not going to be installed
                Depends: omshell but it is not going to be installed
                Depends: omshell-terminal but it is not going to be installed
                Depends: omnotebook but it is not going to be installed
                Depends: drmodelica but it is not going to be installed
                Depends: drcontrol but it is not going to be installed
                Depends: omedit but it is not going to be installed
                Depends: omoptim but it is not going to be installed

 omc : Depends: libcolamd2.7.1 (>= 1:3.4.0) but it is not installable
       Depends: libhdf5-serial-1.8.4 but it is not installable or
                libhdf5-1.8.4 but it is not installable
       Depends: liblapack3gf but it is not installable or
                liblapack.so.3gf but it is not installable or
                libatlas3gf-base but it is not installable
       Recommends: python-beautifulsoup but it is not going to be installed
       Recommends: omplot but it is not going to be installed
       Recommends: libsaxonb-java but it is not going to be installed

libcolamd2.7.1:i386 is already the newest version (1:3.4.0-3).
0 upgraded, 0 newly installed, 0 to remove and 5 not upgraded.
#+END_QUOTE
**** Getting Tom's framework to run

Tom's framework is dependant on a compiled version of openmodelica as the paths
in his [[https://github.com/tshort/openmodelica-javascript][work]] need a build folder i.e everything in one place, as evident by a
reference in his instruction in =build/lib/omc= .
The problems are not manually correctable as to find the references to the
other files ,each weighing around 10 mb is a big task,with no gaurentee of
success.

without those corrections, the compiler would not compile a js version to run
,as required by the rest of the framework.

**** Getting Modelicas VM to run

I was having trouble compiling openmodelica from source so i asked people over
at openmodelica if they could supply me to a VM that has a source version pre-installed .
They did have a VM ([[https://build.openmodelica.org/omc/builds/virtual_machines/stable64/openmodelica-1.11.0~dev.beta1-4-g9772f8e/][linked here]]) But even the VM had an installation which was
done by the packaged version.

I spent a while trying to get their VM to work as their release had hard coded
paths which had issues with vagrant( specifically,the [[https://build.openmodelica.org/omc/builds/virtual_machines/stable64/openmodelica-1.11.0~dev.beta1-4-g9772f8e/OpenModelica-1.9.7/][log file]] was needed and
access to it had been locked out and it's placement was hard coded into the VM )
I had to resort to manually running the VM on Virtual Box, but it didn't help.
